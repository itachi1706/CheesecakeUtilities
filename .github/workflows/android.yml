name: Android CI

on: [push,pull_request,pull_request_target]

jobs:
  build:
    name: Android Compilation Test
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') || (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]')
    steps:
    - name: Checkout Repository
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: actions/checkout@v2.3.5
    - name: Checkout Repository PR
      if: ${{ github.event_name == 'pull_request_target' }}
      uses: actions/checkout@v2.3.5
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: set up JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: 8
    - name: Copy secure values
      run: |
        echo $GOOGLE_SERVICES > ./app/google-services.json
        echo $GMAPS_KEY > ./app/src/main/res/values/google_maps_api.xml
      env:
        GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        GMAPS_KEY: ${{ secrets.GMAPS_KEY }} 
    - name: Make Gradle executable
      run: chmod +x gradlew
    #- name: Clean Gradle (DO NOT USE ALL THE TIME)
    #  run: ./gradlew clean
    - name: Build with Gradle
      run: ./gradlew build
  device-test:
    runs-on: macos-latest
    name: Android Device Test Runner
    if: (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') || (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]')
    steps:
    - name: Checkout Repository
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: actions/checkout@v2.3.5
    - name: Checkout Repository PR
      if: ${{ github.event_name == 'pull_request_target' }}
      uses: actions/checkout@v2.3.5
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Copy secure values
      run: |
        echo $GOOGLE_SERVICES > ./app/google-services.json
        echo $GMAPS_KEY > ./app/src/main/res/values/google_maps_api.xml
      env:
        GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        GMAPS_KEY: ${{ secrets.GMAPS_KEY }} 
    - name: Make Gradle executable
      run: chmod +x gradlew
    - name: List Available Android Devices
      run: $ANDROID_HOME/tools/bin/avdmanager list
    #- name: Clean Gradle (DO NOT USE ALL THE TIME)
    #  run: ./gradlew clean
    - name: run tests
      uses: reactivecircus/android-emulator-runner@v2.20.0
      with:
        api-level: 28
        target: google_apis
        profile: 'pixel_xl'
        arch: x86_64
        script: ./gradlew connectedAndroidTest
  # TODO: Take note https://github.com/actions/create-release
  #release:
  #  name: Release APK file
  #  if: startsWith(github.ref, 'refs/tags/')
  #  runs-on: ubuntu-latest
  #  steps:
  #  - uses: actions/checkout@v2.3.5
  #  - name: Checkout all submodules
  #    uses: textbook/git-checkout-submodule-action@2.1.1
  #  - name: set up JDK 8
  #    uses: actions/setup-java@v2
  #    with:
  #      distribution: 'adopt'
  #      java-version: 8
  #  - name: Copy secure values
  #    run: |
  #      echo $GOOGLE_SERVICES > ./app/google-services.json
  #      echo $GMAPS_KEY > ./app/src/main/res/values/google_maps_api.xml
  #      echo $SAFETYNET_KEY > ./app/key.properties
  #    env:
  #      GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
  #      GMAPS_KEY: ${{ secrets.GMAPS_KEY }} 
  #      SAFETYNET_KEY: ${{ secrets.SAFETYNET_KEY }}
  #  - name: Make Gradle executable
  #    run: chmod +x gradlew
  #  - name: Build with Gradle
  #    run: ./gradlew build
  #  #- name: Clean Gradle (DO NOT USE ALL THE TIME)
  #  #  run: ./gradlew clean
  #  - name: Move APK file to main folder
  #    run: mv ./app/build/outputs/apk/debug/app-debug.apk ./CheesecakeUtilities-debug-gha.apk
  #  - name: Create Release
  #    id: create_release
  #   uses: actions/create-release@v1.0.0
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GH Actions
  #    with:
  #      tag_name: ${{ github.ref }}
  #      release_name: Release ${{ github.ref }}
  #      draft: false
  #      prerelease: false
  #  - name: Upload Release Asset
  #    id: upload-release-asset 
  #    uses: actions/upload-release-asset@v1.0.1
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #      asset_path: ./CheesecakeUtilities-debug-gha.apk
  #      asset_name: CheesecakeUtilities-debug-gha.apk
  #      asset_content_type: application/vnd.android.package-archive
